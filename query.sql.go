// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package main

import (
	"context"
	"database/sql"
)

const shelves = `-- name: Shelves :many
SELECT id, name
  FROM shelves
 WHERE user_id = $1
 ORDER BY position
`

type ShelvesRow struct {
	ID   int64
	Name sql.NullString
}

func (q *Queries) Shelves(ctx context.Context, userID int64) ([]ShelvesRow, error) {
	rows, err := q.db.QueryContext(ctx, shelves, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShelvesRow
	for rows.Next() {
		var i ShelvesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const signup = `-- name: Signup :one
INSERT
 INTO public.users(name, image, slug, email)
VALUES($1,$2,$3,$4)
       ON CONFLICT (email)
       DO UPDATE SET name = $1, image = $2
       RETURNING id
`

type SignupParams struct {
	Name  sql.NullString
	Image sql.NullString
	Slug  string
	Email sql.NullString
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, signup,
		arg.Name,
		arg.Image,
		arg.Slug,
		arg.Email,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const user = `-- name: User :one
SELECT id, name, email, image, created_at, updated_at, slug, description, facebook, twitter, linkedin, instagram, phone, whatsapp, telegram, amazon_associates_id
  FROM users
 WHERE id = $1
 LIMIT 1
`

func (q *Queries) User(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, user, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.Description,
		&i.Facebook,
		&i.Twitter,
		&i.Linkedin,
		&i.Instagram,
		&i.Phone,
		&i.Whatsapp,
		&i.Telegram,
		&i.AmazonAssociatesID,
	)
	return i, err
}

const userBySlug = `-- name: UserBySlug :one
SELECT id, name, email, image, created_at, updated_at, slug, description, facebook, twitter, linkedin, instagram, phone, whatsapp, telegram, amazon_associates_id
  FROM users
 WHERE slug = $1
 LIMIT 1
`

func (q *Queries) UserBySlug(ctx context.Context, slug string) (User, error) {
	row := q.db.QueryRowContext(ctx, userBySlug, slug)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
		&i.Description,
		&i.Facebook,
		&i.Twitter,
		&i.Linkedin,
		&i.Instagram,
		&i.Phone,
		&i.Whatsapp,
		&i.Telegram,
		&i.AmazonAssociatesID,
	)
	return i, err
}

const userUnshelvedBooks = `-- name: UserUnshelvedBooks :many
SELECT books.id id, title, books.image image, google_books_id, slug, isbn
  FROM books, users
 WHERE users.id = books.user_id
   AND user_id = $1
   AND shelf_id IS NULL
`

type UserUnshelvedBooksRow struct {
	ID            int64
	Title         string
	Image         sql.NullString
	GoogleBooksID sql.NullString
	Slug          string
	Isbn          string
}

func (q *Queries) UserUnshelvedBooks(ctx context.Context, userID int64) ([]UserUnshelvedBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, userUnshelvedBooks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserUnshelvedBooksRow
	for rows.Next() {
		var i UserUnshelvedBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Image,
			&i.GoogleBooksID,
			&i.Slug,
			&i.Isbn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
