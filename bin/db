#!/usr/bin/env bash
set -e

mkdir -p db/migrate

PGUSER=`echo $DATABASE_URL | sed 's/postgres:\/\///' | awk -F"[@/?:]" '{ print $1 }'`
PGPASSWORD=`echo $DATABASE_URL | sed 's/postgres:\/\///' | awk -F"[@/?:]" '{ print $2 }'`
PGHOST=`echo $DATABASE_URL | sed 's/postgres:\/\///' | awk -F"[@/?:]" '{ print $3 }'`
PGDATABASE=`echo $DATABASE_URL | sed 's/postgres:\/\///' | awk -F"[@/?:]" '{ print $4 }'`

create_schema_migrations() {
    echo "CREATE TABLE IF NOT EXISTS schema_migrations (version character varying NOT NULL UNIQUE);" \
        | psql -v ON_ERROR_STOP=1 --no-psqlrc --quiet $DATABASE_URL
}

create() {
    echo "Create database $PGDATABASE"
    createdb --host=$PGHOST --username=$PGUSER $PGDATABASE
}

drop() {
    echo "Dropping database $PGDATABASE"
    dropdb --host=$PGHOST --username=$PGUSER $PGDATABASE
}

seed() {
    echo "Loading seeds..."
    psql -v ON_ERROR_STOP=1 --no-psqlrc --quiet $DATABASE_URL \
         < db/seeds.sql
}

load() {
    echo "Loading schema..."
    psql -v ON_ERROR_STOP=1 --no-psqlrc --quiet $DATABASE_URL \
         < db/structure.sql
}

up() {
    f=`ls db/migrate/$1_*.sql`
    echo "Migrating $f"
    awk '/-- up/{flag=1; next} /-- down/{flag=0} flag' $f \
        | tee \
        | psql -v ON_ERROR_STOP=1 --no-psqlrc --echo-queries $DATABASE_URL
    create_schema_migrations
    psql -v ON_ERROR_STOP=1 --no-psqlrc $DATABASE_URL --command "INSERT INTO schema_migrations (version) VALUES($1);"
    dump
}

down() {
    f=`ls db/migrate/$1_*.sql`
    echo "Rolling back $f"
    awk '/-- down/{flag=1; next} /-- up/{flag=0} flag' $f \
        | tee \
        | psql -v ON_ERROR_STOP=1 --no-psqlrc --echo-queries $DATABASE_URL
    create_schema_migrations
    psql -v ON_ERROR_STOP=1 --no-psqlrc $DATABASE_URL --command "DELETE FROM schema_migrations WHERE version='$1';"
    dump
}

dump() {
    echo "Dumping database schema..."
    # dump schema of all tables
    pg_dump --format=plain --schema-only --no-owner $DATABASE_URL \
            > db/structure.sql
    # dump schema_migrations table
    pg_dump --format=plain --inserts --data-only -t schema_migrations $DATABASE_URL \
            >> db/structure.sql
}

create_migration() {
    ts=`date +"%Y%m%d%H%M%S"`
    f="db/migrate/${ts}_$1.sql"
    touch $f
    echo "-- up" >> $f
    echo "-- down" >> $f
    echo "Migration created: $f"
}

migrate(){
    # List all migrations from the database
    psql --no-psqlrc --echo-queries --tuples-only $DATABASE_URL --command "SELECT * from schema_migrations" \
        | awk '{ print $1 }' \
              > /tmp/migrated

    # List all migrations files
    ls db/migrate/*.sql \
        | awk -F"/" '{ print $3 }' \
        | awk -F"_" '{ print $1 }' \
              > /tmp/migrations

    # list of timestamps yet to be migrated
    uplist=`comm -23 <(sort /tmp/migrations) <(sort /tmp/migrated)`

    # migrate up every one of them in order
    for ts in $uplist; do
        up $ts
    done
}

rollback() {
    version=`psql --no-psqlrc --echo-queries --tuples-only $DATABASE_URL --command "SELECT * from schema_migrations ORDER BY version DESC LIMIT 1" | awk '{ print $1 }'`
    down $version
}

case $1 in
    "create") create;;
    "drop") drop;;
    "status") status;;
    "create_migration") create_migration $2;;
    "dump") dump;;
    "load") load;;
    "seed") seed;;
    "migrate") migrate;;
    "rollback") rollback;;
    "setup")
        create
        load
        seed
        ;;
    "reset")
        drop
        create
        load
        seed
        ;;
esac
